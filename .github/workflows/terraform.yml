name: Provision Infrastructure

on:
  pull_request:
    branches:
      - main
    paths:
      - terraform/**
      - .github/workflow/terraform.yml
  # Hotfix process when pushing directly to master / Only to be used by myself locally 
  push:
    branches: 
      - main
    paths:
      - terraform/**

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    #if: github.event.pull_request.head.ref == 'terraform' || github.event.push == true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

# IN CASE WE NEED TO ADD A DEV ENVIRONMENT ON CLOUD WE CAN RUN THIS STEP AS FOLLOWS :

      #  - name: Set Workspace
      #    id: set_workspace
      #    run: |
      #      prod="${{ github.event.pull_request.base.ref == 'prod' || github.ref == 'refs/head/prod' }}"
      #      if [ "$prod" = true ]; then
      #        echo "::set-output name=environment::prod"
      #      else
      #        echo "::set-output name=environment::dev"
      #      fi